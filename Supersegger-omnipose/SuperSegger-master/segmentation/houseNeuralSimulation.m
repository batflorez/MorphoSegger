function [Y,Xf,Af] = houseNeuralSimulation(X,net)
% houseNeuralSimulation : calculates output for neural network.
% Improvement in speed from using net (X).
%
% Generated by Neural Network Toolbox function genFunction, 14-Mar-2016 14:57:51.
% 
% [Y] = houseFcn(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 21xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 2xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.
% This file is part of SuperSeggerOpti.


% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
if isfield(net.input.processSettings{1},'xoffset')
    x1_step1_xoffset = net.input.processSettings{1}.xoffset;
else
    disp('no net offset');
    x1_step1_xoffset =0 ;
end

if isfield(net.input.processSettings{1},'gain')
    x1_step1_gain = net.input.processSettings{1}.gain;
else
    disp('no net gain');
    x1_step1_gain =0 ;
end

if isfield(net.input.processSettings{1},'ymin')
    x1_step1_gain = net.input.processSettings{1}.ymin;
else
    disp('no net ymin');
    x1_step1_ymin =0 ;
end

% Layer 1
b1 = net.b{1};
IW1_1 = net.IW{1};

% Layer 2
b2 = net.b{2};
LW2_1 = net.LW{2};

% ===== SIMULATION ========

if isfield(net.input.processSettings{1},'keep')
    keep = net.input.processSettings{1}.keep;
    X = X(keep,:);
end


% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);




% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = softmax_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Output 1
    Y{1,ts} = a2;
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
y = bsxfun(@minus,x,settings_xoffset);
y = bsxfun(@times,y,settings_gain);
y = bsxfun(@plus,y,settings_ymin);
end

% Competitive Soft Transfer Function
function a = softmax_apply(n)
nmax = max(n,[],1);
n = bsxfun(@minus,n,nmax);
numer = exp(n);
denom = sum(numer,1); 
denom(denom == 0) = 1;
a = bsxfun(@rdivide,numer,denom);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
a = 2 ./ (1 + exp(-2*n)) - 1;
end
