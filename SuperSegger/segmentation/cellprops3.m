function info = cellprops3( mask, props )
% cellprops3 : Calculates the shape properties of the region or 'cell'.
%
% INPUT :
%    mask : cell / region mask
%    props : properties generated by regionprops
% OUTPUT :        
%   info = { 'long axis: L1', ...
%     'short axis mean:  L2mean', ...
%     'neck width:  Lneck,
%     'short axis max: L2max,
%     'short axis var: L2v', ...
%     '<width sin pi s/S >: s1 ', ...
%     '<width sin pi 2s/S>: s2', ...
%     '<width sin pi 3s/S>: s3', ...
%     'RoundIndOver: RoundIndOver', ...
%     'RoundIndUnder RoundIndUnder', ...
%     'Area: props.Area,', ....
%     'max dtheta^2: stm1 ', ...
%     '<theta sin pi s/2S >: sa1 ', ...
%     '<theta sin pi s/S  >: sa2', ...
%     '<theta sin pi 3s/2S>: sa3', ...
%     '<theta sin pi 2s/S >: sa4', ...
%     '1/long axis: 1/L1', ...
%     '1/mean short axis: 1/L2mean',...
%     'Min End Width: minWidthEnd',...
%     'round end min: sqmin',...
%     'round end max: sqmax'};
%
% Copyright (C) 2016 Wiggins Lab 
% Written by Stella Stylianidou, Paul Wiggins.
% University of Washington, 2016
% This file is part of SuperSegger.
% 
% SuperSegger is free software: you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation, either version 3 of the License, or
% (at your option) any later version.
% 
% SuperSegger is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
% 
% You should have received a copy of the GNU General Public License
% along with SuperSegger.  If not, see <http://www.gnu.org/licenses/>.

debug = false;


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Calculate cell thickness and length by rotating the 
% region based on the angle of the majorAxis.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Orientation = props.Orientation;

% rotated image
imRot = fast_rotate_loose_double( mask, -Orientation+90);
ss = size(imRot);

if debug
    figure(2);
    clf;
    imshow(cat(3,ag(imRot)+0.5*ag(~imRot),ag(imRot),ag(imRot)),'InitialMagnification','fit');
    hold on;
end

% short axis width
width       = sum(double(imRot),2);
ymask       = (width>=1);
widthWindow = ([0;width(1:end-1)] + width + [width(2:end);0] )/3;

L1          = sum(ymask); % long axis
L2max       = max(widthWindow); % max of short axis
L2v         = var(widthWindow); % variance of short axis

ymin = find(ymask,1,'first');
ymax = find(ymask,1,'last');
ind = (ymin):(ymax);
L2mean = mean(width(ind)); % mean of short axis

if L2mean<1
    L2mean=1;
end


% sine cosine idea : width(0:L1) * sin (2*pi*(0:L1)/L1)

nn = (numel(ind)-1); % long axis width
s  = 2*pi*(0:nn)/nn;
s1 = mean(width(ind)'.*sin(s/2));
s2 = mean(width(ind)'.*sin(s));
s3 = mean(width(ind)'.*sin(s/3));


% neck width
if numel(widthWindow) > 6;
    ww       = widthWindow';
    v        = ww(3:end)-ww(1:end-2); % change in width from i3 to i1
    
    s_change = logical([0, sign(v(2:end))-sign(v(1:end-1)),0,0]); % positive change in change
    s_change(2:end) = logical(s_change(2:end)+s_change(1:end-1));
    ind = find(s_change);
    ind_ = ind(logical((ind>3).*(ind<(numel(ww)-2))));
    
    if isempty(ind_)
        Lneck = L2mean;
        pos = mean([ymin,ymax]);
    else
        [Lneck,pos] = min(ww(ind_)); % minimum width value
        pos = ind_(pos); % index in width window
    end
else
        Lneck = L2mean;
        pos = mean([ymin,ymax]);
end

if Lneck > L2mean
    Lneck = L2mean;
    pos = mean([ymin,ymax]);
end

if debug
    % ww : width window
    xx = 1:numel(ww);
    figure(1);
    clf;
    plot( xx, ww, '.-' );
    ylabel ('width');
    xlabel ('Image Pixel (1 : width window)');
    hold on;
    x = 1:Lneck
    y=pos*ones(1,numel(x))
    plot(y,x, 'r--'); % marks position of neck
    plot( xx(ind_), ww(ind_), 'g.' );
    figure(2)
    
end


% finds thin ends
im = find( logical(width), 1, 'first' );
ip = find( logical(width), 1, 'last' );
if ip-im >= 3
   m1 = mean( width(im+[ 0, 1]) );
   m4 = mean( width(ip+[-1, 0]) );
   minWidthEnd = min(m1,m4);
else
   minWidthEnd = L2mean;
end

% finds square ends
if ip-im >= 7
    m2 = mean( width(im+[ 2, 3]) );
    m3 = mean( width(ip+[-3,-2]) );

    sq1 = m2-m1;
    sq2 = m3-m4;
    
    sqmax = max(sq1,sq2);
    sqmin = min(sq1,sq2);
else
   sqmax = 0;
   sqmin = 0;
end

% maximum bend angle
dr  = 3;
dr2 = 3;
yy = (ymin+dr):dr2:(ymax-dr);

if numel(yy) > 4
    tmp = imRot(yy,:);
    
    x = 1:ss(2);
    
    [X,Y] = meshgrid(x,yy);
    
    xx = sum( X.*tmp,2 )./sum(tmp,2);
    
    d1 = [xx(1:end-2)-xx(3:end),yy(1:end-2)'-yy(3:end)'];
    
    dangle = ((d1(1:end-2,1).*d1(3:end,2)...
        -d1(1:end-2,2).*d1(3:end,1))./...
        (norm2(d1(1:end-2,:)).*norm2(d1(3:end,:))));
            
    stm1 = max( dangle.^2 );
    
    
    angle = cumsum(dangle)';
    na = numel(angle)-1;
    
    s = (0:na)/na*pi/2;

    try
    sa1 = mean( angle.*sin(s  ) );
    sa2 = mean( angle.*sin(s*2) );
    sa3 = mean( angle.*sin(s*3) );
    sa4 = mean( angle.*sin(s*4) );
    catch ME
        printError(ME);
    end     
        
    if debug       
        ss_ = size(d1);       
        for ii = 1:ss_(1)            
            plot( xx(ii)+[0,-d1(ii,1)], yy(ii)+[0,-d1(ii,2)], 'c.' );
        end
    end
    
    
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %
    % Calculate the end score
    %
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    yy = [(ymin+dr),(ymax-dr)];
    xx = widthWindow(round(yy));
    r = ((xx)/2);
    r(r<1)=1;
    
    yyd = [(ymin+r(1)+[-1,0,1]),(ymax-r(2)+[-1,0,1])];
    yy  = round(yyd);
    
    [X] = meshgrid(x,yy);
    
    tmp = imRot(yy,:);
    xx = sum( X.*tmp,2 )./sum(tmp,2);
    xx = [mean(xx(1:3)),mean(xx(4:6))];
    yyd = yyd([2,5]);

    
    if debug
        phi = 0:.1:2*pi;
        
        plot(xx,yyd,'go');
        xxx = r(1)*cos(phi);
        yyy = r(1)*sin(phi);
        plot(xx(1)+xxx,yy(1)+yyy,'g:')
        
        xxx = r(2)*cos(phi);
        yyy = r(2)*sin(phi);
        plot(xx(2)+xxx,yyd(2)+yyy,'g:')
        
        plot( [1,ss(2)],[ymax,ymax],':r')
        plot( [1,ss(2)],[ymin,ymin],':r')
        
    end
    
    xcen = xx;
    ycen = yyd;
    
    x0 = xcen(1);
    y0 = ycen(1);
    r0 = r(1);
    
    yy = max(1,round(y0-r0-2)):min(round(y0+r0+2),ss(1));
    xx = max(1,round(x0-r0-2)):min(round(x0+r0+2),ss(2));
    
    [X,Y] = meshgrid(xx,yy);
    tmp = imRot(yy,xx);
    
    R2 = (X-x0).^2 + (Y-y0).^2 - r0^2;
    
    ind_over = find( ((R2 > 0).*tmp).*(d1(1,1)*(X-x0) + d1(1,2)*(Y-y0) > 0));
    ind_under = find( ((R2 < 0).*(tmp<1)).*(d1(1,1)*(X-x0) + d1(1,2)*(Y-y0) > 0));
    
    
    if debug
        plot(X(ind_over),Y(ind_over),'r.');
        plot(X(ind_under),Y(ind_under),'b.');
    end
    
    RoundIndOverTop  = sum( tmp(ind_over).*R2(ind_over))/r0^4;
    RoundIndUnderTop = sum( (1-tmp(ind_under)).*abs(R2(ind_under)))/r0^4;
    
    x0 = xcen(2);
    y0 = ycen(2);
    r0 = r(2);
    
    yy = max(1,round(y0-r0-2)):min(round(y0+r0+2),ss(1));
    xx = max(1,round(x0-r0-2)):min(round(x0+r0+2),ss(2));
    
    [X,Y] = meshgrid(xx,yy);
    tmp = imRot(yy,xx);
    
    R2 = (X-x0).^2 + (Y-y0).^2 - r0^2;
    
    ind_over = find( ((R2 > 0).*tmp).*(d1(1,1)*(X-x0) + d1(1,2)*(Y-y0) < 0));
    ind_under = find( ((R2 < 0).*(tmp<1)).*(d1(1,1)*(X-x0) + d1(1,2)*(Y-y0) < 0));
    
    if debug
        plot(X(ind_over),Y(ind_over),'r.');
        plot(X(ind_under),Y(ind_under),'b.');
    end
    
    
    RoundIndOverBot  = sum( tmp(ind_over).*R2(ind_over))/r0^4;
    RoundIndUnderBot = sum( (1-tmp(ind_under)).*abs(R2(ind_under)))/r0^4;
    
else
    %'fail'
    stm1 = 0;
    sa1 = 0;
    sa2 = 0;
    sa3 = 0;
    sa4 = 0;
    RoundIndOverTop  = 0;
    RoundIndUnderTop = 0;
    RoundIndOverBot  = 0;
    RoundIndUnderBot = 0;
    
end


RoundIndOver  = RoundIndOverTop  + RoundIndOverBot;
RoundIndUnder = RoundIndUnderTop + RoundIndUnderBot;




if L1 < 1
    L1 = 1;
end


info = [L1, ...
    L2mean, ...
    Lneck, ...
    L2max, ...
    L2v, ...
    s1, ...
    s2, ...
    s3, ...
    RoundIndOver, ...
    RoundIndUnder, ...
    props.Area, ....
    stm1, ...
    sa1, ...
    sa2, ...
    sa3, ...
    sa4, ...
    1/L1, ...
    1/L2mean,...
    minWidthEnd,...
    sqmin,...
    sqmax];

info(isnan(info)) = 0;

if numel(info) ~= 21
    disp ('incorrect number of cell properties calculated')
end



if debug
    drawnow;
    keyboard;
end



end

function tmp = norm2( dd )

tmp = sqrt(sum(dd.*dd,2));

end